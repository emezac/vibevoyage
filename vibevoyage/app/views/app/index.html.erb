<%# Enhanced Cultural Journey - Clean Version %>

<!-- Hero Section -->
<section class="min-h-screen flex items-center justify-center relative overflow-hidden" id="hero-section">
    <!-- Constellation Background -->
    <div class="constellation absolute inset-0 pointer-events-none">
        <div class="star" style="top: 20%; left: 10%; animation-delay: 0s;"></div>
        <div class="star" style="top: 40%; left: 25%; animation-delay: 1s;"></div>
        <div class="star" style="top: 60%; left: 70%; animation-delay: 2s;"></div>
        <div class="star" style="top: 80%; left: 45%; animation-delay: 0.5s;"></div>
        <div class="star" style="top: 15%; left: 80%; animation-delay: 1.5s;"></div>
        <div class="star" style="top: 35%; left: 60%; animation-delay: 2.5s;"></div>
    </div>

    <!-- Floating Orbs -->
    <div class="floating-orb w-64 h-64 top-20 right-20 opacity-40" style="animation-delay: 0s;"></div>
    <div class="floating-orb w-32 h-32 top-1/2 left-10 opacity-30" style="animation-delay: 2s;"></div>
    <div class="floating-orb w-48 h-48 bottom-40 right-1/3 opacity-25" style="animation-delay: 4s;"></div>

    <div class="container mx-auto px-4 pt-20 pb-16 relative z-10">
        <div class="text-center max-w-5xl mx-auto">
            <div class="mb-8">
                <div class="inline-flex items-center gap-2 glass-card px-6 py-3 text-xs font-medium text-slate-300 mb-6 rounded-full">
                    <div class="w-2 h-2 rounded-full bg-gradient-to-r from-green-400 to-blue-400 animate-pulse"></div>
                    <span>üß¨ Cultural DNA + Qloo Intelligence</span>
                </div>
            </div>
            
            <h1 class="text-4xl md:text-6xl lg:text-7xl font-display font-black tracking-tight mb-8 leading-none">
                Transform your 
                <span class="gradient-text block relative">cultural essence</span>
                <span class="text-slate-400 block text-3xl md:text-5xl lg:text-6xl font-light">into living stories</span>
            </h1>
            
            <p class="text-lg md:text-xl text-slate-400 font-light leading-relaxed max-w-4xl mx-auto mb-16">
                Using <strong class="text-yellow-400">real Qloo data</strong> and 
                <strong class="text-purple-400">actual Cultural DNA analysis</strong>
            </p>
            
            <%= form_with url: app_create_real_journey_path, local: false, id: 'vibe-form', class: "glass-card-strong p-8 max-w-3xl mx-auto relative rounded-2xl" do |form| %>
                <div class="absolute -top-6 left-1/2 transform -translate-x-1/2">
                    <div class="w-12 h-12 rounded-xl flex items-center justify-center pulse-glow" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                        <span class="text-2xl">üß¨</span>
                    </div>
                </div>

                <%= form.label :user_vibe, class: "text-left block text-lg font-semibold text-slate-200 mb-4 flex items-center gap-2" do %>
                    <span class="text-xl">üé≠</span>
                    <span class="gradient-text">Describe your cultural vibe:</span>
                <% end %>
                
                <div class="relative">
                    <%= form.text_area :user_vibe, 
                        rows: 4, 
                        required: true,
                        class: "w-full p-6 text-base bg-black/40 border border-white/10 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20 resize-none rounded-xl text-white placeholder-slate-400 transition-all duration-500",
                        placeholder: "A soulful Saturday in New York City. I'm drawn to vintage steakhouses, experimental jazz spaces, vinyl record hunting..." %>
                </div>
                
                <%= form.button type: "submit", id: "submit-btn",
                    class: "mt-6 w-full font-bold py-4 px-8 rounded-xl transition-all duration-500 text-lg transform hover:scale-[1.02] flex items-center justify-center gap-3 group text-white relative overflow-hidden",
                    style: "background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage), var(--accent-gold));" do %>
                    
                    <span class="text-2xl">üîç</span>
                    <span class="relative z-10">Analyze with Real Data</span>
                    <svg class="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                <% end %>
            <% end %>
        </div>
    </div>
</section>

<!-- Processing Section -->
<section class="py-16 px-4 relative" id="processing-section" style="display: none;">
    <div class="max-w-4xl mx-auto">
        <div class="glass-card-strong p-8 text-center relative overflow-hidden rounded-2xl">
            <div class="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-blue-500/10 to-green-500/10 animate-pulse"></div>
            
            <div class="relative z-10">
                <div class="flex justify-center items-center mb-8">
                    <div class="relative">
                        <div class="w-20 h-20 rounded-full flex items-center justify-center pulse-glow" style="background: radial-gradient(circle, var(--accent-terracotta), rgba(224, 122, 95, 0.3));">
                            <span class="text-3xl animate-pulse">üîç</span>
                        </div>
                    </div>
                </div>
                
                <h3 class="text-2xl md:text-3xl font-display font-bold text-white mb-4 gradient-text">
                    Decoding your cultural DNA...
                </h3>
                <p class="text-slate-300 text-lg mb-8">
                    Analyzing with Qloo's cultural intelligence
                </p>
                
                <div class="mb-8">
                    <div class="flex justify-between text-sm text-slate-400 mb-3">
                        <span>Cultural Analysis Progress</span>
                        <span id="progress-percent">0%</span>
                    </div>
                    
                    <div class="w-full bg-white/10 rounded-full h-2 overflow-hidden">
                        <div class="h-full rounded-full transition-all duration-1000" id="progress-bar" style="width: 0%; background: linear-gradient(90deg, #a855f7, var(--accent-terracotta), var(--accent-gold));"></div>
                    </div>
                </div>
                
                <div class="glass-card bg-black/60 p-6 rounded-xl font-mono text-xs text-left space-y-2 max-h-40 overflow-y-auto" id="processing-logs">
                    <!-- Processing logs will appear here -->
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cultural DNA Section -->
<section class="py-16 px-4 relative" id="dna-section" style="display: none;">
    <div class="max-w-6xl mx-auto">
        <div class="text-center mb-12">
            <div class="inline-flex items-center gap-2 glass-card px-6 py-3 text-sm text-slate-300 mb-6 rounded-full">
                <div class="w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-pink-400 animate-pulse"></div>
                <span>Your Cultural DNA Analysis</span>
            </div>
            <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 gradient-text">
                Your Cultural Genome Decoded
            </h2>
            <p class="text-base text-slate-400 max-w-2xl mx-auto">
                Based on Qloo's intelligence and your unique preferences
            </p>
        </div>

        <!-- DNA Analysis Grid -->
        <div class="grid lg:grid-cols-2 gap-6 mb-12">
            <!-- Cultural Archetypes -->
            <div class="glass-card-strong p-6 rounded-xl">
                <h3 class="text-lg font-bold mb-4 flex items-center gap-2">
                    üé≠ <span class="gradient-text">Cultural Archetypes</span>
                </h3>
                <div class="space-y-4" id="cultural-archetypes">
                    <div class="text-center text-slate-400 py-8 text-sm">
                        Analyzing your cultural DNA...
                    </div>
                </div>
            </div>

            <!-- Cross-Pollination -->
            <div class="glass-card-strong p-6 rounded-xl">
                <h3 class="text-lg font-bold mb-4 flex items-center gap-2">
                    üå± <span class="gradient-text">Cross-Pollination</span>
                </h3>
                <div class="space-y-3" id="cross-pollination">
                    <div class="text-center text-slate-400 py-8 text-sm">
                        Discovering cultural connections...
                    </div>
                </div>
            </div>
        </div>

        <!-- Evolution Timeline -->
        <div class="glass-card-strong p-6 rounded-xl">
            <h3 class="text-lg font-bold mb-4 text-center flex items-center justify-center gap-2">
                ‚è∞ <span class="gradient-text">Cultural Evolution Path</span>
            </h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="evolution-path">
                <div class="text-center text-slate-400 text-sm py-4">
                    Mapping your cultural journey...
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Narrative Section -->
<section class="py-16 px-4" id="narrative-section" style="display: none;">
    <div class="max-w-5xl mx-auto">
        <div class="text-center mb-8">
            <div class="inline-flex items-center gap-2 glass-card px-6 py-3 text-sm text-slate-300 mb-6 rounded-full">
                <span class="w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-pink-400 animate-pulse"></span>
                <span>Your Cultural Narrative</span>
            </div>
            <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 gradient-text">
                Your Journey Story
            </h2>
        </div>
        <div id="narrative-content" class="glass-card-strong p-8 rounded-2xl">
            <!-- Narrative content will be populated here -->
        </div>
    </div>
</section>

<!-- Timeline Section -->
<section class="py-16 px-4" id="timeline-section" style="display: none;">
    <div class="max-w-6xl mx-auto">
        <div class="text-center mb-16">
            <div class="inline-flex items-center gap-2 glass-card px-6 py-3 text-sm text-slate-300 mb-6 rounded-full">
                <div class="w-2 h-2 rounded-full animate-pulse" style="background: linear-gradient(45deg, var(--accent-terracotta), var(--accent-sage));"></div>
                <span>üîç Your Cultural Adventure</span>
            </div>
            <h2 class="text-3xl md:text-5xl font-display font-bold mb-6" id="timeline-title">
                Your Adventure
            </h2>
            <p class="text-base md:text-lg text-slate-400 max-w-3xl mx-auto mb-8">
                Each experience curated with real Qloo data and cultural intelligence
            </p>
            
            <!-- Share Adventure Button (prepared for future implementation) -->
            <button id="share-adventure-btn" class="inline-flex items-center gap-2 glass-card px-6 py-3 text-sm font-semibold text-white hover:bg-white/20 transition-all duration-300 rounded-full" style="display: none;">
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                Share Adventure
            </button>
        </div>
        
        <div class="relative" id="timeline-content-wrapper">
            <div id="timeline-content">
                <!-- Timeline content will be populated here -->
            </div>
        </div>
    </div>
</section>

<!-- Cultural Insights Modal -->
<div id="cultural-insights-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="glass-card-strong p-8 rounded-2xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-2xl font-display font-bold gradient-text" id="modal-title">
                    Why We Chose This Place
                </h3>
                <button id="close-modal" class="text-slate-400 hover:text-white text-2xl">√ó</button>
            </div>
            <div id="modal-content" class="space-y-6">
                <!-- Dynamic content will be inserted here -->
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --accent-terracotta: #e07a5f;
        --accent-sage: #81b29a;
        --accent-sand: #f3e5d8;
        --accent-gold: #f2cc8f;
        --accent-purple: #6366f1;
        --accent-cyan: #06b6d4;
        --deep-space: #0f0f23;
        --dark-blue: #1a1d3a;
        --purple-dark: #1e1b4b;
    }
    
    * {
        font-family: 'Inter', sans-serif;
    }
    
    .font-display {
        font-family: 'Playfair Display', serif;
    }
    
    body {
        background: linear-gradient(135deg, 
            #0f0f23 0%, 
            #1a1d3a 25%, 
            #1e1b4b 50%, 
            #1a1d3a 75%, 
            #0f0f23 100%);
        color: white;
        overflow-x: hidden;
        min-height: 100vh;
    }
    
    .gradient-text {
        background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage), var(--accent-gold));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        background-size: 200% 200%;
        animation: gradientShift 3s ease-in-out infinite;
    }
    
    @keyframes gradientShift {
        0%, 100% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
    }
    
    .glass-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }
    
    .glass-card-strong {
        background: rgba(255, 255, 255, 0.08);
        backdrop-filter: blur(30px);
        border: 1px solid rgba(255, 255, 255, 0.15);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);
    }
    
    .floating-orb {
        position: absolute;
        border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, rgba(224, 122, 95, 0.3), rgba(129, 178, 154, 0.2), transparent);
        animation: float 6s ease-in-out infinite;
        filter: blur(1px);
    }
    
    @keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }
    
    .fade-in-up { 
        animation: fadeInUp 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards; 
    }
    
    @keyframes fadeInUp {
        from { opacity: 0; transform: translateY(50px) scale(0.9); }
        to { opacity: 1; transform: translateY(0) scale(1); }
    }
    
    .pulse-glow {
        animation: pulseGlow 2s ease-in-out infinite;
    }
    
    @keyframes pulseGlow {
        0%, 100% { box-shadow: 0 0 20px rgba(224, 122, 95, 0.4); }
        50% { box-shadow: 0 0 40px rgba(224, 122, 95, 0.8), 0 0 60px rgba(129, 178, 154, 0.4); }
    }
    
    .hover-lift {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .hover-lift:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.4);
    }
    
    .constellation {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        pointer-events: none;
    }
    
    .star {
        position: absolute;
        width: 2px;
        height: 2px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        animation: twinkle 3s ease-in-out infinite;
    }
    
    @keyframes twinkle {
        0%, 100% { opacity: 0.3; transform: scale(0.8); }
        50% { opacity: 1; transform: scale(1.2); }
    }

    .qloo-enhanced-card {
        background: linear-gradient(135deg, 
            rgba(224, 122, 95, 0.1) 0%, 
            rgba(129, 178, 154, 0.1) 50%, 
            rgba(242, 204, 143, 0.1) 100%);
        border: 2px solid rgba(224, 122, 95, 0.3);
        position: relative;
        overflow: hidden;
    }
    
    .qloo-enhanced-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.1), 
            transparent);
        transition: left 0.5s ease;
    }
    
    .qloo-enhanced-card:hover::before {
        left: 100%;
    }

    .price-indicator {
        display: inline-flex;
        align-items: center;
        gap: 1px;
    }

    .price-symbol {
        font-weight: bold;
        font-size: 0.9em;
    }

    .price-symbol.active {
        color: var(--accent-gold);
    }

    .price-symbol.inactive {
        color: rgba(255, 255, 255, 0.3);
    }

    .rating-stars {
        display: inline-flex;
        align-items: center;
        gap: 1px;
    }

    .star-icon {
        width: 12px;
        height: 12px;
        fill: #fbbf24;
    }

    .star-icon.empty {
        fill: rgba(255, 255, 255, 0.3);
    }

    .hours-indicator {
        display: inline-flex;
        align-items: center;
        gap: 4px;
        font-size: 0.75rem;
        padding: 2px 8px;
        border-radius: 12px;
    }

    .hours-indicator.open {
        background: rgba(34, 197, 94, 0.2);
        color: #22c55e;
    }

    .hours-indicator.closed {
        background: rgba(239, 68, 68, 0.2);
        color: #ef4444;
    }

    .insights-trigger {
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .insights-trigger:hover {
        background: rgba(255, 255, 255, 0.1);
        border-color: var(--accent-terracotta);
        transform: translateY(-2px);
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üîç Enhanced Cultural Journey Interface Loaded');
        
        // Global variables
        let currentProcessId = null;
        let statusInterval = null;
        let realBackendData = null;

        const form = document.getElementById('vibe-form');
        const submitBtn = document.getElementById('submit-btn');
        const heroSection = document.getElementById('hero-section');
        const processingSection = document.getElementById('processing-section');
        const dnaSection = document.getElementById('dna-section');
        const narrativeSection = document.getElementById('narrative-section');
        const timelineSection = document.getElementById('timeline-section');

        // Modal functionality
        const modal = document.getElementById('cultural-insights-modal');
        const closeModal = document.getElementById('close-modal');
        
        closeModal.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });

        // Form submission
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(form);
            const userVibe = formData.get('user_vibe');
            
            console.log('üé≠ Processing user vibe:', userVibe.substring(0, 100));
            
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                <span>Analyzing Cultural DNA...</span>
            `;
            
            // Show processing section
            transitionToSection(processingSection);
            
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ Backend response:', data);
                
                if (data.success && data.process_id) {
                    currentProcessId = data.process_id;
                    startStatusPolling();
                } else {
                    showError(data.message || 'Failed to start processing');
                }
            })
            .catch(error => {
                console.error('‚ùå Network error:', error);
                showError('Network connection failed');
            });
        });

        function startStatusPolling() {
            if (!currentProcessId) return;
            
            console.log('üîÑ Starting status polling for process:', currentProcessId);
            
            statusInterval = setInterval(() => {
                const baseUrl = window.location.origin;
                const statusUrl = `${baseUrl}/app/status/${currentProcessId}`;
                
                fetch(statusUrl, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(`üìä Progress: ${data.progress}% - ${data.status}`);
                    updateProcessingStatus(data);
                    
                    if (data.status === 'complete' && data.itinerary) {
                        clearInterval(statusInterval);
                        statusInterval = null;
                        
                        console.log('üéâ Journey processing complete');
                        realBackendData = data.itinerary;
                        
                        showResults(data.itinerary);
                        
                    } else if (data.status === 'failed' || data.status === 'error') {
                        clearInterval(statusInterval);
                        statusInterval = null;
                        showError(data.message || 'Processing failed');
                    }
                })
                .catch(error => {
                    console.error('‚ùå Status polling error:', error);
                    clearInterval(statusInterval);
                    statusInterval = null;
                    showError('Status check failed');
                });
            }, 2000);
        }

        function updateProcessingStatus(data) {
            const progressBar = document.getElementById('progress-bar');
            const progressPercent = document.getElementById('progress-percent');
            const processingLogs = document.getElementById('processing-logs');
            
            const progress = data.progress || 0;
            
            if (progressBar) progressBar.style.width = `${progress}%`;
            if (progressPercent) progressPercent.textContent = `${progress}%`;
            
            if (processingLogs && data.message) {
                const logEntry = document.createElement('div');
                logEntry.className = 'text-slate-300 text-xs flex items-center gap-2 fade-in-up';
                logEntry.innerHTML = `<span>üîç</span> <span>${data.message}</span>`;
                processingLogs.appendChild(logEntry);
                processingLogs.scrollTop = processingLogs.scrollHeight;
            }
        }

        function showResults(itinerary) {
            console.log('üé® Displaying results:', itinerary);
            
            // Show Cultural DNA if available
            if (itinerary.cultural_dna) {
                showCulturalDNA(itinerary.cultural_dna);
                transitionToSection(dnaSection);
                
                setTimeout(() => {
                    if (itinerary.narrative_html) {
                        showNarrative(itinerary.narrative_html);
                        transitionToSection(narrativeSection);
                        
                        setTimeout(() => {
                            showTimeline(itinerary);
                        }, 2000);
                    } else {
                        showTimeline(itinerary);
                    }
                }, 3000);
            } else {
                // Skip DNA section if not available
                if (itinerary.narrative_html) {
                    showNarrative(itinerary.narrative_html);
                    transitionToSection(narrativeSection);
                    
                    setTimeout(() => {
                        showTimeline(itinerary);
                    }, 2000);
                } else {
                    showTimeline(itinerary);
                }
            }
        }

        function showCulturalDNA(culturalDna) {
            console.log('üß¨ Showing Cultural DNA:', culturalDna);
            
            // Show archetypes
            if (culturalDna.archetypes) {
                populateArchetypes(culturalDna.archetypes);
            }
            
            // Show cross-pollination
            if (culturalDna.cross_pollination) {
                populateCrossPollination(culturalDna.cross_pollination);
            }
            
            // Show evolution path
            if (culturalDna.evolution_path && culturalDna.evolution_path.timeline) {
                populateEvolutionPath(culturalDna.evolution_path.timeline);
            }
        }

        function populateArchetypes(archetypes) {
            const container = document.getElementById('cultural-archetypes');
            if (!container) return;
            
            const colors = ['orange', 'green', 'purple', 'blue'];
            let html = '';
            
            Object.entries(archetypes).forEach(([archetype, score], index) => {
                const color = colors[index % colors.length];
                html += `
                    <div class="archetype-item mb-4">
                        <div class="flex justify-between items-center mb-2">
                            <span class="font-semibold text-white capitalize">${archetype}</span>
                            <span class="text-${color}-400 font-bold">${score}%</span>
                        </div>
                        <div class="w-full bg-white/10 rounded-full h-2">
                            <div class="bg-gradient-to-r from-${color}-400 to-${color}-600 h-2 rounded-full transition-all duration-2000" style="width: ${score}%;"></div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function populateCrossPollination(crossPollination) {
            const container = document.getElementById('cross-pollination');
            if (!container) return;
            
            if (!crossPollination || crossPollination.length === 0) {
                container.innerHTML = '<div class="text-center text-slate-400 py-8 text-sm">No cross-pollination detected</div>';
                return;
            }
            
            let html = '';
            crossPollination.forEach((connection, index) => {
                const domains = connection.domains || [];
                const strength = Math.round((connection.strength || 0) * 100);
                
                html += `
                    <div class="border-l-4 border-orange-400 pl-4 mb-4">
                        <h4 class="font-bold text-orange-400 mb-1">${domains.join(' √ó ')}</h4>
                        <p class="text-sm text-slate-300">Strength: ${strength}%</p>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function populateEvolutionPath(timeline) {
            const container = document.getElementById('evolution-path');
            if (!container) return;
            
            const phases = ['immediate', 'short_term', 'medium_term', 'long_term'];
            const icons = ['‚ö°', 'üöÄ', 'üå±', 'üèÜ'];
            const labels = ['Immediate', 'Short Term', 'Medium Term', 'Long Term'];
            
            let html = '';
            phases.forEach((phase, index) => {
                const suggestions = timeline[phase] || [];
                const suggestion = suggestions[0] || { suggestion: 'No data' };
                
                html += `
                    <div class="text-center p-3 glass-card rounded-lg">
                        <div class="text-2xl mb-2">${icons[index]}</div>
                        <div class="text-xs font-semibold mb-2">${labels[index]}</div>
                        <div class="text-xs text-slate-300">${suggestion.suggestion.substring(0, 50)}...</div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }

        function showNarrative(narrativeHtml) {
            console.log('üìñ Showing narrative');
            const narrativeContent = document.getElementById('narrative-content');
            if (narrativeContent) {
                narrativeContent.innerHTML = narrativeHtml;
            }
        }

        function showTimeline(itinerary) {
            console.log('‚è∞ Showing timeline with', itinerary.experiences?.length || 0, 'experiences');
            
            const timelineTitle = document.getElementById('timeline-title');
            const timelineContent = document.getElementById('timeline-content');
            const shareBtn = document.getElementById('share-adventure-btn');
            
            if (timelineTitle) {
                timelineTitle.innerHTML = `Your Adventure in <span class="gradient-text">${itinerary.city || 'Unknown City'}</span>`;
            }
            
            if (timelineContent && itinerary.experiences) {
                timelineContent.innerHTML = generateTimelineHTML(itinerary.experiences);
            }
            
            // Show share button (prepared for future implementation)
            if (shareBtn) {
                shareBtn.style.display = 'inline-flex';
            }
            
            transitionToSection(timelineSection);
        }

        function generateTimelineHTML(experiences) {
            if (!experiences || experiences.length === 0) {
                return '<div class="text-center text-slate-400 py-20">No experiences found</div>';
            }

            const experiencesHTML = experiences.map((exp, index) => {
                return generateExperienceCard(exp, index);
            }).join('');
            
            return `<div class="space-y-8">${experiencesHTML}</div>`;
        }

        function generateExperienceCard(exp, index) {
            console.log(`üéØ Generating enhanced card ${index + 1}:`, exp.location);
            
            const colors = ['terracotta', 'sage', 'gold'];
            const color = colors[index % 3];
            
            // --- INICIO DE LA CORRECCI√ìN ---
            // Acceso directo a las propiedades del objeto 'exp' aplanado
            const time = exp.time || `${9 + index * 3}:00 ${index < 2 ? 'AM' : 'PM'}`;
            const title = exp.title || 'Cultural Experience';
            const location = exp.location || 'Special Location';
            const description = exp.description || 'A unique cultural experience';
            const area = exp.area || 'Center';
            const duration = exp.duration || '1-2 hours';
            const vibeMatch = exp.vibe_match || 85;
            const rating = exp.rating || 4.2;
            const priceLevel = exp.price_level || null;
            const hours = exp.hours || null;
            const image = exp.image || getDefaultImage(index);
            const address = exp.address || 'Address not available';
            const website = exp.website || null; // Acceso directo y simple
            const phone = exp.phone || null;     // Acceso directo y simple
            const latitude = exp.latitude;
            const longitude = exp.longitude;
            const qlooKeywords = exp.qloo_keywords ? extractQlooKeywords(exp.qloo_keywords) : [];
            const dataSources = exp.data_sources || ['qloo', 'google_places'];
            const dataQuality = exp.data_quality || 'high';
            const qlooEntityId = exp.qloo_entity_id || '';
            // --- FIN DE LA CORRECCI√ìN ---

            const googleMapsUrl = latitude && longitude ? 
                `https://www.google.com/maps/@${latitude},${longitude},15z` : 
                (address ? `https://www.google.com/maps/search/${encodeURIComponent(location + ' ' + address)}` : '#');
            const directionsUrl = latitude && longitude ? 
                `https://www.google.com/maps/dir/?api=1&destination=${latitude},${longitude}` : 
                (address ? `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(address)}` : '#');
            
            return `
                <div class="qloo-enhanced-card glass-card-strong p-6 rounded-3xl hover-lift">
                    <!-- Header with Time and Match Score -->
                    <div class="flex items-start gap-6 mb-6">
                        <div class="w-16 h-16 rounded-2xl flex items-center justify-center" style="background: linear-gradient(135deg, var(--accent-${color}), var(--accent-gold));">
                            <span class="text-2xl">${getExperienceIcon(index)}</span>
                        </div>
                        <div class="flex-1">
                            <p class="text-xs text-slate-500 uppercase tracking-wider mb-1">${time}</p>
                            <h3 class="text-xl font-bold text-white mb-1">${title}</h3>
                            <p class="text-sm text-slate-300 mb-1">${location}</p>
                            ${address ? `<p class="text-xs text-slate-400">${address}</p>` : ''}
                        </div>
                        <div class="text-right">
                            <div class="text-xl font-bold gradient-text">${vibeMatch}%</div>
                            <div class="text-xs text-slate-400">Match</div>
                        </div>
                    </div>
                    
                    <!-- Enhanced Rating, Price, and Hours Bar -->
                    <div class="flex items-center justify-between mb-6 p-3 glass-card rounded-lg">
                        <div class="flex items-center gap-4">
                            <!-- Rating with Stars -->
                            <div class="flex items-center gap-2">
                                ${generateStarRating(rating)}
                                <span class="text-sm font-semibold text-white">${rating}</span>
                            </div>
                            
                            <!-- Price Level -->
                            ${priceLevel ? `
                                <div class="price-indicator">
                                    ${generatePriceIndicator(priceLevel)}
                                </div>
                            ` : ''}
                        </div>
                        
                        <!-- Hours Status -->
                        ${hours ? generateHoursStatus(hours) : ''}
                    </div>
                    
                    <!-- Enhanced Image with Overlay -->
                    ${image ? `
                        <div class="relative mb-6">
                            <img src="${image}" alt="${title}" class="w-full h-48 object-cover rounded-2xl" 
                                 onerror="this.src='https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop'">
                            <div class="absolute top-4 right-4 bg-green-500/80 px-3 py-1 rounded-full text-xs font-bold text-white flex items-center gap-1">
                                <span>‚úÖ</span> Real Qloo Data
                            </div>
                            <div class="absolute bottom-4 left-4 bg-black/60 px-3 py-1 rounded-full text-xs text-white">
                                ${area} ‚Ä¢ ${duration}
                            </div>
                        </div>
                    ` : ''}
                    
                    <!-- Description -->
                    <p class="text-sm text-slate-400 mb-6 leading-relaxed">
                        ${description}
                    </p>
                    
                    <!-- Why This Place Button -->
                    <button class="insights-trigger w-full mb-6 glass-card p-4 rounded-lg text-left" 
                            onclick="showCulturalInsights(${index}, '${location.replace(/'/g, "\\'")}')">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center gap-3">
                                <div class="w-8 h-8 rounded-full flex items-center justify-center" style="background: linear-gradient(135deg, var(--accent-${color}), var(--accent-gold));">
                                    <span class="text-sm">üß†</span>
                                </div>
                                <div>
                                    <div class="font-semibold text-white text-sm">Why we chose this place?</div>
                                    <div class="text-xs text-slate-400">Cultural insights & DNA analysis</div>
                                </div>
                            </div>
                            <svg class="w-5 h-5 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </div>
                    </button>
                    
                    <!-- Qloo Keywords -->
                    ${qlooKeywords.length > 0 ? `
                        <div class="mb-6">
                            <p class="text-xs text-slate-500 mb-3 flex items-center gap-2">
                                <span class="text-yellow-400">üß¨</span>
                                Cultural DNA Keywords:
                            </p>
                            <div class="flex flex-wrap gap-2">
                                ${qlooKeywords.slice(0, 8).map(keyword => `
                                    <span class="px-3 py-1 rounded-full text-xs font-medium" 
                                          style="background: linear-gradient(135deg, var(--accent-${color}), var(--accent-gold)); color: white;">
                                        ${keyword}
                                    </span>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    <!-- Data Sources Footer -->
                    <div class="glass-card bg-black/40 p-4 rounded-lg mb-6">
                        <div class="flex items-center justify-between text-xs">
                            <div class="flex items-center gap-2">
                                <span class="text-green-400 font-semibold">Data Sources:</span>
                                ${dataSources.map(source => `
                                    <span class="px-2 py-1 bg-green-500/20 rounded text-green-200">${source}</span>
                                `).join('')}
                            </div>
                            <div class="text-slate-400">Quality: ${dataQuality}</div>
                        </div>
                        ${qlooEntityId ? `<div class="text-xs text-slate-500 mt-1">Qloo ID: ${qlooEntityId}</div>` : ''}
                    </div>
                    
                    <!-- Action Buttons Grid -->
                    <div class="grid grid-cols-2 gap-3">
                        ${(latitude && longitude) || address ? `
                            <a href="${googleMapsUrl}" target="_blank" 
                               class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>
                                View on Maps
                            </a>
                        ` : ''}
                        
                        ${(latitude && longitude) || address ? `
                            <a href="${directionsUrl}" target="_blank" 
                               class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3l6-3" /></svg>
                                Directions
                            </a>
                        ` : ''}
                        
                        ${website ? `
                            <a href="${website}" target="_blank" rel="noopener noreferrer"
                               class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9" /></svg>
                                Website
                            </a>
                        ` : ''}
                        
                        ${phone ? `
                            <a href="tel:${phone}" 
                               class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" /></svg>
                                Call
                            </a>
                        ` : ''}
                    </div>
                </div>
            `;
        }

        // Enhanced data extraction functions
        function extractRating(exp) {
            return exp.rating || 
                   exp.business_rating || 
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.business_rating) ||
                   (exp.google_data && exp.google_data.rating) ||
                   4.2;
        }

        function extractPriceLevel(exp) {
            return exp.price_level || 
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.price_level) ||
                   (exp.google_data && exp.google_data.price_level) ||
                   null;
        }

        function extractHours(exp) {
            return exp.hours || 
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.hours) ||
                   (exp.google_data && exp.google_data.opening_hours) ||
                   null;
        }

        function extractBestImage(exp, index) {
            // Try Qloo images first
            if (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.images) {
                const images = exp.qloo_entity.properties.images;
                if (images.length > 0) {
                    const img = images[0];
                    return typeof img === 'object' ? img.url : img;
                }
            }
            
            // Try Google Photos
            if (exp.google_data && exp.google_data.photos && exp.google_data.photos.length > 0) {
                return exp.google_data.photos[0].url;
            }
            
            // Use provided image or fallback
            return exp.image || getDefaultImage(index);
        }

        function extractAddress(exp) {
            return exp.address ||
                   (exp.google_data && exp.google_data.formatted_address) ||
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.address) ||
                   '';
        }

        function extractWebsite(exp) {
            return exp.website ||
                   (exp.google_data && exp.google_data.website) ||
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.website) ||
                   null;
        }

        function extractPhone(exp) {
            return exp.phone ||
                   (exp.google_data && exp.google_data.formatted_phone_number) ||
                   (exp.qloo_entity && exp.qloo_entity.properties && exp.qloo_entity.properties.phone) ||
                   null;
        }

        function extractQlooKeywords(keywordsArray) {
            const keywords = [];
            if (keywordsArray && Array.isArray(keywordsArray)) {
                keywordsArray.forEach(keyword => {
                    if (typeof keyword === 'object' && keyword.name) {
                        keywords.push(keyword.name);
                    } else if (typeof keyword === 'string') {
                        keywords.push(keyword);
                    }
                });
            }
            return [...new Set(keywords)]; // Eliminar duplicados
        }

        function generateStarRating(rating) {
            const fullStars = Math.floor(rating);
            const hasHalfStar = rating % 1 >= 0.5;
            const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
            
            let html = '<div class="rating-stars">';
            
            // Full stars
            for (let i = 0; i < fullStars; i++) {
                html += '<svg class="star-icon" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
            }
            
            // Half star
            if (hasHalfStar) {
                html += '<svg class="star-icon" viewBox="0 0 20 20"><defs><linearGradient id="half"><stop offset="50%" stop-color="#fbbf24"/><stop offset="50%" stop-color="rgba(255,255,255,0.3)"/></linearGradient></defs><path fill="url(#half)" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
            }
            
            // Empty stars
            for (let i = 0; i < emptyStars; i++) {
                html += '<svg class="star-icon empty" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
            }
            
            html += '</div>';
            return html;
        }

        function generatePriceIndicator(priceLevel) {
            const maxLevel = 4;
            let html = '';
            
            for (let i = 1; i <= maxLevel; i++) {
                const className = i <= priceLevel ? 'price-symbol active' : 'price-symbol inactive';
                html += `<span class="${className}">$</span>`;
            }
            
            return html;
        }

        function generateHoursStatus(hours) {
            // Simple implementation - in real app you'd parse actual hours
            const isOpen = Math.random() > 0.3; // Mock open status
            const statusClass = isOpen ? 'open' : 'closed';
            const statusText = isOpen ? 'Open Now' : 'Closed';
            const timeText = isOpen ? 'until 11 PM' : 'opens 9 AM';
            
            return `
                <div class="hours-indicator ${statusClass}">
                    <div class="w-2 h-2 rounded-full ${isOpen ? 'bg-green-400' : 'bg-red-400'}"></div>
                    <span>${statusText}</span>
                    <span class="text-xs opacity-75">${timeText}</span>
                </div>
            `;
        }

        function getDefaultImage(index) {
            const images = [
                "https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=800&auto=format&fit=crop&ixlib=rb-4.0.3",
                "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=800&auto=format&fit=crop&ixlib=rb-4.0.3", 
                "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=800&auto=format&fit=crop&ixlib=rb-4.0.3"
            ];
            return images[index] || images[0];
        }

        function getExperienceIcon(index) {
            const icons = ['‚òï', 'üé®', 'üç∏', 'üìö', 'üé≠', 'üó∫Ô∏è'];
            return icons[index % icons.length];
        }

        // Cultural Insights Modal Function
        window.showCulturalInsights = function(index, placeName) {
            console.log(`üß† Showing cultural insights for ${placeName}`);
            
            if (!realBackendData || !realBackendData.experiences || !realBackendData.experiences[index]) {
                console.error('No experience data available for insights');
                return;
            }
            
            const experience = realBackendData.experiences[index];
            const modal = document.getElementById('cultural-insights-modal');
            const modalTitle = document.getElementById('modal-title');
            const modalContent = document.getElementById('modal-content');
            
            modalTitle.innerHTML = `Why We Chose <span class="gradient-text">${placeName}</span>`;
            
            let content = '';
            
            // Cultural Resonance
            if (experience.cultural_explanation) {
                content += `
                    <div class="glass-card p-4 rounded-lg">
                        <h4 class="font-bold text-orange-400 mb-3 flex items-center gap-2">
                            ‚ö° Cultural Resonance
                        </h4>
                        <p class="text-slate-300 leading-relaxed">${experience.cultural_explanation}</p>
                    </div>
                `;
            }
            
            // Why Chosen
            if (experience.why_chosen) {
                content += `
                    <div class="glass-card p-4 rounded-lg">
                        <h4 class="font-bold text-blue-400 mb-3 flex items-center gap-2">
                            üéØ Selection Rationale
                        </h4>
                        <p class="text-slate-300 leading-relaxed">${experience.why_chosen}</p>
                    </div>
                `;
            }
            
            // Cultural DNA from experience
            if (realBackendData.cultural_dna) {
                if (realBackendData.cultural_dna.archetypes) {
                    content += `
                        <div class="glass-card p-4 rounded-lg">
                            <h4 class="font-bold text-purple-400 mb-3 flex items-center gap-2">
                                üß¨ Matching Archetypes
                            </h4>
                            <div class="space-y-2">
                                ${Object.entries(realBackendData.cultural_dna.archetypes).map(([archetype, score]) => `
                                    <div class="flex justify-between items-center">
                                        <span class="text-slate-300">${archetype}</span>
                                        <span class="text-purple-400 font-bold">${score}%</span>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                }
                
                if (realBackendData.cultural_dna.cross_pollination && realBackendData.cultural_dna.cross_pollination.length > 0) {
                    content += `
                        <div class="glass-card p-4 rounded-lg">
                            <h4 class="font-bold text-green-400 mb-3 flex items-center gap-2">
                                üå± Cross-Pollination Discoveries
                            </h4>
                            <div class="space-y-3">
                                ${realBackendData.cultural_dna.cross_pollination.map(connection => `
                                    <div class="border-l-2 border-green-400 pl-3">
                                        <div class="text-green-300 font-semibold">${connection.domains ? connection.domains.join(' √ó ') : 'Cultural Connection'}</div>
                                        <div class="text-slate-400 text-sm">Strength: ${Math.round((connection.strength || 0) * 100)}%</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    `;
                }
            }
            
            // Qloo Keywords Analysis
            const keywords = extractQlooKeywords(experience);
            if (keywords.length > 0) {
                content += `
                    <div class="glass-card p-4 rounded-lg">
                        <h4 class="font-bold text-yellow-400 mb-3 flex items-center gap-2">
                            üè∑Ô∏è Cultural Keywords Match
                        </h4>
                        <div class="flex flex-wrap gap-2">
                            ${keywords.map(keyword => `
                                <span class="px-2 py-1 bg-yellow-500/20 text-yellow-300 text-xs rounded">${keyword}</span>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
            
            // Vibe Match Score
            content += `
                <div class="glass-card p-4 rounded-lg">
                    <h4 class="font-bold text-pink-400 mb-3 flex items-center gap-2">
                        üí´ Vibe Match Analysis
                    </h4>
                    <div class="flex items-center gap-4">
                        <div class="text-3xl font-bold gradient-text">${experience.vibe_match || 85}%</div>
                        <div class="flex-1">
                            <div class="w-full bg-white/10 rounded-full h-2">
                                <div class="bg-gradient-to-r from-pink-400 to-purple-600 h-2 rounded-full" style="width: ${experience.vibe_match || 85}%;"></div>
                            </div>
                            <p class="text-slate-400 text-sm mt-1">Based on your cultural preferences and Qloo intelligence</p>
                        </div>
                    </div>
                </div>
            `;
            
            if (!content) {
                content = `
                    <div class="text-center text-slate-400 py-8">
                        <div class="text-4xl mb-4">ü§î</div>
                        <p>Cultural insights are being processed...</p>
                        <p class="text-sm mt-2">This place was selected based on your unique cultural DNA profile.</p>
                    </div>
                `;
            }
            
            modalContent.innerHTML = content;
            modal.classList.remove('hidden');
        };

        function transitionToSection(targetSection) {
            // Hide current visible section
            const sections = [heroSection, processingSection, dnaSection, narrativeSection, timelineSection];
            sections.forEach(section => {
                if (section !== targetSection) {
                    section.style.display = 'none';
                }
            });

            // Show target section with animation
            targetSection.style.display = 'block';
            targetSection.style.opacity = '0';
            targetSection.style.transform = 'translateY(30px)';
            
            setTimeout(() => {
                targetSection.style.transition = 'all 0.8s ease-out';
                targetSection.style.opacity = '1';
                targetSection.style.transform = 'translateY(0)';
                
                targetSection.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'start' 
                });
            }, 100);
        }

        function showError(message) {
            console.error('‚ùå Error:', message);
            const errorHTML = `
                <div class="text-center max-w-xl mx-auto">
                    <div class="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center bg-red-500">
                        <svg class="w-8 h-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01" />
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-white mb-3">Something went wrong</h3>
                    <p class="text-red-300 mb-6">${message}</p>
                    <button onclick="location.reload()" class="font-bold py-3 px-6 rounded-lg text-white" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                        Try Again
                    </button>
                </div>
            `;
            
            if (processingSection) {
                processingSection.querySelector('.relative.z-10').innerHTML = errorHTML;
            }
        }

        // Global functions
        window.startNewJourney = function() {
            location.reload();
        };
    });
</script>