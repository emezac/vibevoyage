<!-- Hero Section -->
<section class="min-h-screen flex items-center justify-center relative overflow-hidden" id="hero-section">
    <div class="container mx-auto px-4 pt-20 pb-16 relative z-10">
        <div class="text-center max-w-5xl mx-auto">
            <div class="mb-8">
                <div class="inline-flex items-center gap-3 glass-card px-6 py-3 text-sm font-medium text-slate-300 mb-6 rounded-full">
                    <div class="w-2 h-2 rounded-full bg-gradient-to-r from-green-400 to-blue-400 animate-pulse"></div>
                    <span>üß¨ Cultural DNA + Qloo Intelligence</span>
                </div>
            </div>
            
            <h1 class="text-4xl md:text-6xl lg:text-7xl font-display font-black tracking-tight mb-8 leading-none">
                Transform your 
                <span class="gradient-text block relative">cultural essence</span>
                <span class="text-slate-400 block text-3xl md:text-5xl lg:text-6xl font-light">into living stories</span>
            </h1>
            
            <p class="text-lg md:text-xl text-slate-400 font-light leading-relaxed max-w-4xl mx-auto mb-16">
                Using <strong class="text-yellow-400">real Qloo data</strong> and 
                <strong class="text-purple-400">actual Cultural DNA analysis</strong>
                <% if current_user %>
                    <br><span class="text-sm">Welcome back, <%= current_user.display_name %>! 
                    You have <%= current_user.journeys_remaining_this_month %> 
                    <%= 'journey'.pluralize(current_user.journeys_remaining_this_month) %> remaining this month.</span>
                <% end %>
            </p>
            
                <%= form_with url: app_create_real_journey_path, local: false, id: 'vibe-form', class: "glass-card-strong p-6 md:p-8 max-w-3xl mx-auto relative rounded-2xl" do |form| %>
                    <% if current_user && !current_user.can_create_journey? %>
                        <div class="glass-card bg-yellow-500/10 border border-yellow-400/20 p-4 rounded-2xl mb-6">
                            <div class="flex items-center gap-3">
                                <span class="text-2xl">‚ö†Ô∏è</span>
                                <div>
                                    <h4 class="font-bold text-yellow-300 mb-1">Journey Limit Reached</h4>
                                    <p class="text-sm text-yellow-200">
                                        You've used all <%= current_user.subscription_plan.max_journeys_per_month %> 
                                        <%= 'journey'.pluralize(current_user.subscription_plan.max_journeys_per_month) %> 
                                        for this month. 
                                        <%= link_to "Upgrade your subscription", subscriptions_path, 
                                            class: "text-yellow-400 hover:text-yellow-300 underline font-medium" %> 
                                        to continue exploring!
                                    </p>
                                </div>
                            </div>
                        </div>
                    <% end %>
                <div class="absolute -top-6 left-1/2 transform -translate-x-1/2">
                    <div class="w-12 h-12 rounded-xl flex items-center justify-center pulse-glow" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                        <span class="text-2xl">üß¨</span>
                    </div>
                </div>

                <%= form.label :user_vibe, class: "text-left block text-lg font-semibold text-slate-200 mb-4 flex items-center gap-2" do %>
                    <span class="text-xl md:text-2xl">üé≠</span>
                    <span class="gradient-text">Describe your cultural vibe:</span>
                <% end %>
                
                <div class="relative">
                    <%= form.text_area :user_vibe, 
                        rows: 4, 
                        required: true,
                        class: "w-full p-4 md:p-6 text-base bg-black/40 border border-white/10 focus:border-yellow-400 focus:ring-2 focus:ring-yellow-400/20 resize-none rounded-xl text-white placeholder-slate-400 transition-all duration-500",
                        placeholder: "A soulful Saturday in New York City. I'm drawn to vintage steakhouses, experimental jazz spaces, vinyl record hunting...",
                        maxlength: 500 %>
                    
                    <!-- Character Counter -->
                    <div class="absolute bottom-3 right-3 text-xs text-slate-500">
                        <span id="char-count">0</span>/500
                    </div>
                </div>
                
                <!-- Feature Pills -->
                <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-6 text-sm">
                    <div class="glass-card p-3 text-center rounded-xl">
                        <div class="w-8 h-8 mx-auto mb-2 rounded-lg flex items-center justify-center bg-gradient-to-br from-orange-400/80 to-red-400/80">
                            <svg class="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            </svg>
                        </div>
                        <p class="text-slate-300 text-xs md:text-sm">Local Experiences</p>
                    </div>
                    
                    <div class="glass-card p-3 text-center rounded-xl">
                        <div class="w-8 h-8 mx-auto mb-2 rounded-lg flex items-center justify-center bg-gradient-to-br from-green-400/80 to-teal-400/80">
                            <svg class="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.636-6.364l.707.707M12 21v-1m-6.364-1.636l.707-.707" />
                            </svg>
                        </div>
                        <p class="text-slate-300 text-xs md:text-sm">AI Curation</p>
                    </div>
                    
                    <div class="glass-card p-3 text-center rounded-xl">
                        <div class="w-8 h-8 mx-auto mb-2 rounded-lg flex items-center justify-center bg-gradient-to-br from-yellow-400/80 to-amber-400/80">
                            <svg class="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                            </svg>
                        </div>
                        <p class="text-slate-300 text-xs md:text-sm">Personal Match</p>
                    </div>
                </div>
                
                <%= form.button type: "submit", id: "submit-btn",
                    disabled: (current_user && !current_user.can_create_journey?),
                    class: "mt-6 w-full font-bold py-4 md:py-5 px-6 md:px-8 rounded-xl transition-all duration-500 text-lg transform hover:scale-[1.02] flex items-center justify-center gap-3 group text-white relative overflow-hidden #{'opacity-50 cursor-not-allowed' if current_user && !current_user.can_create_journey?}",
                    style: "background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage), var(--accent-gold));" do %>
                    
                    <span class="text-xl md:text-2xl">üîç</span>
                    <span class="relative z-10">Analyze with Real Data</span>
                    <svg class="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                <% end %>
            <% end %>
        </div>
    </div>
</section>

<!-- Processing Section -->
<section class="py-12 md:py-20 px-4 relative section-transition section-hidden" id="processing-section">
    <div class="max-w-4xl mx-auto">
        <div class="glass-card-strong p-6 md:p-8 text-center relative overflow-hidden rounded-2xl">
            <div class="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-blue-500/10 to-green-500/10 animate-pulse"></div>
            
            <div class="relative z-10">
                <div class="flex justify-center items-center mb-6 md:mb-8">
                    <div class="relative">
                        <div class="w-16 h-16 md:w-20 md:h-20 rounded-full flex items-center justify-center pulse-glow" style="background: radial-gradient(circle, var(--accent-terracotta), rgba(224, 122, 95, 0.3));">
                            <span class="text-2xl md:text-3xl animate-pulse">üîç</span>
                        </div>
                    </div>
                </div>
                
                <h3 class="text-2xl md:text-3xl font-display font-bold text-white mb-3 md:mb-4 gradient-text">
                    Decoding your cultural DNA...
                </h3>
                <p class="text-slate-300 text-base md:text-lg mb-6 md:mb-8">
                    Analyzing with Qloo's cultural intelligence
                </p>
                
                <div class="mb-6 md:mb-8">
                    <div class="flex justify-between text-xs md:text-sm text-slate-400 mb-3">
                        <span>Cultural Analysis Progress</span>
                        <span id="progress-percent">0%</span>
                    </div>
                    
                    <div class="w-full bg-white/10 rounded-full h-2 overflow-hidden">
                        <div class="vibe-match-bar h-full rounded-full transition-all duration-1000" id="progress-bar" style="width: 0%;"></div>
                    </div>
                </div>
                
                <div class="glass-card bg-black/60 p-4 md:p-6 rounded-2xl font-mono text-xs md:text-sm text-left space-y-3 max-h-48 overflow-y-auto" id="processing-logs">
                    <!-- Processing logs will appear here -->
                </div>
                
                <!-- Loading Animation -->
                <div class="mt-6 flex justify-center">
                    <div class="loading-dots">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cultural DNA Section -->
<section class="py-12 md:py-20 px-4 relative section-transition section-hidden" id="dna-section">
    <div class="max-w-7xl mx-auto">
        <div class="text-center mb-12 md:mb-16">
            <div class="inline-flex items-center gap-3 glass-card px-6 py-3 text-sm text-slate-300 mb-6 md:mb-8 rounded-full">
                <div class="w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-pink-400 animate-pulse"></div>
                <span>Your Cultural DNA Analysis</span>
            </div>
            <h2 class="text-3xl md:text-5xl font-display font-bold mb-4 md:mb-6 gradient-text">
                Your Cultural Genome Decoded
            </h2>
            <p class="text-base md:text-xl text-slate-400 max-w-3xl mx-auto">
                Based on Qloo's intelligence and your unique preferences
            </p>
        </div>

        <!-- Cultural DNA Analysis Grid -->
        <div class="grid lg:grid-cols-2 gap-6 md:gap-8 mb-12 md:mb-16">
            <!-- Cultural Archetypes -->
            <div class="glass-card-strong p-6 md:p-8 rounded-3xl hover-lift">
                <h3 class="text-xl md:text-2xl font-bold mb-6 flex items-center gap-3">
                    üé≠ <span class="gradient-text">Cultural Archetypes</span>
                </h3>
                <div class="space-y-6" id="cultural-archetypes">
                    <div class="text-center text-slate-400 py-8 text-sm">
                        Analyzing your cultural DNA...
                    </div>
                </div>
            </div>

            <!-- Cross-Pollination -->
            <div class="glass-card-strong p-6 md:p-8 rounded-3xl hover-lift">
                <h3 class="text-xl md:text-2xl font-bold mb-6 flex items-center gap-3">
                    üå± <span class="gradient-text">Cross-Pollination</span>
                </h3>
                <div class="space-y-4" id="cross-pollination">
                    <div class="text-center text-slate-400 py-8 text-sm">
                        Discovering cultural connections...
                    </div>
                </div>
            </div>
        </div>

        <!-- Cultural Evolution Timeline -->
        <div class="glass-card-strong p-6 md:p-8 rounded-3xl hover-lift">
            <h3 class="text-xl md:text-2xl font-bold mb-6 text-center flex items-center justify-center gap-3">
                ‚è∞ <span class="gradient-text">Cultural Evolution Path</span>
            </h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4" id="evolution-path">
                <div class="text-center text-slate-400 text-sm py-4">
                    Mapping your cultural journey...
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Narrative Section -->
<section class="py-12 md:py-20 px-4 section-transition section-hidden" id="narrative-section">
    <div class="max-w-5xl mx-auto">
        <div class="text-center mb-8 md:mb-12">
            <div class="inline-flex items-center gap-3 glass-card px-6 py-3 text-sm text-slate-300 mb-6 md:mb-8 rounded-full">
                <span class="w-2 h-2 rounded-full bg-gradient-to-r from-purple-400 to-pink-400 animate-pulse"></span>
                <span>Your Cultural Narrative</span>
            </div>
            <h2 class="text-3xl md:text-5xl font-display font-bold mb-4 md:mb-6 gradient-text">
                Your Journey Story
            </h2>
        </div>
        <div id="narrative-content" class="glass-card-strong p-6 md:p-8 rounded-3xl">
            <!-- Narrative content will be populated here -->
        </div>
    </div>
</section>

<!-- Timeline Section -->
<section class="py-12 md:py-20 px-4 section-transition section-hidden" id="timeline-section">
    <div class="max-w-7xl mx-auto">
        <div class="text-center mb-12 md:mb-16">
            <div class="inline-flex items-center gap-3 glass-card px-6 py-3 text-sm text-slate-300 mb-6 md:mb-8 rounded-full">
                <div class="w-2 h-2 rounded-full animate-pulse" style="background: linear-gradient(45deg, var(--accent-terracotta), var(--accent-sage));"></div>
                <span>üîç Your Cultural Adventure</span>
            </div>
            <h2 class="text-3xl md:text-5xl font-display font-bold mb-4 md:mb-6" id="timeline-title">
                Your Adventure
            </h2>
            <p class="text-base md:text-lg text-slate-400 max-w-3xl mx-auto mb-6 md:mb-8">
                Each experience curated with real Qloo data and cultural intelligence
            </p>
            
            <!-- Share Adventure Button -->
            <button id="share-adventure-btn" class="inline-flex items-center gap-2 glass-card px-6 py-3 text-sm font-semibold text-white hover:bg-white/20 transition-all duration-300 rounded-full" style="display: none;">
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                Share Adventure
            </button>
        </div>
        <!-- Modal para sharing -->
<div id="share-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="glass-card-strong p-6 md:p-8 rounded-3xl max-w-md w-full">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl md:text-2xl font-display font-bold gradient-text">Share Your Adventure</h3>
                <button onclick="closeShareModal()" class="text-slate-400 hover:text-white text-2xl transition-colors">√ó</button>
            </div>
            
            <div class="space-y-4">
                <p class="text-slate-300 text-sm mb-6">
                    Make your cultural journey public and share it with the world!
                </p>
                
                <!-- Adventure preview -->
                <div class="glass-card p-4 rounded-2xl mb-6" id="adventure-preview">
                    <div class="flex items-center gap-3 mb-3">
                        <div class="w-10 h-10 rounded-full flex items-center justify-center" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                            <span class="text-white font-bold text-sm" id="user-initial">A</span>
                        </div>
                        <div>
                            <div class="font-semibold text-white" id="adventure-title">Your Cultural Adventure</div>
                            <div class="text-xs text-slate-400" id="adventure-city">City</div>
                        </div>
                    </div>
                    <p class="text-slate-300 text-sm" id="adventure-description">A unique cultural journey...</p>
                </div>
                
                <!-- Share buttons -->
                <div class="space-y-3">
                    <button onclick="makePublicAndShare()" id="make-public-btn" class="w-full py-3 px-4 rounded-xl font-semibold text-white transition-all duration-300" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                        <span class="flex items-center justify-center gap-2">
                            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            Make Public & Get Share Link
                        </span>
                    </button>
                    
                    <!-- Share options (aparecen despu√©s de hacer p√∫blico) -->
                    <div id="share-options" class="space-y-3 hidden">
                        <div class="glass-card p-4 rounded-2xl">
                            <label class="block text-sm font-medium text-slate-300 mb-2">Share Link</label>
                            <div class="flex gap-2">
                                <input type="text" id="share-url" readonly class="flex-1 p-2 bg-black/40 border border-white/10 rounded-lg text-white text-sm">
                                <button onclick="copyShareLink()" class="px-3 py-2 glass-card rounded-lg hover:bg-white/20 transition-colors">
                                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-3">
                            <button onclick="shareToTwitter()" class="p-3 glass-card rounded-xl hover:bg-white/20 transition-colors flex items-center justify-center gap-2">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                                </svg>
                                Twitter
                            </button>
                            
                            <button onclick="shareToFacebook()" class="p-3 glass-card rounded-xl hover:bg-white/20 transition-colors flex items-center justify-center gap-2">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                                </svg>
                                Facebook
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
        
        <div class="relative" id="timeline-content-wrapper">
            <div id="timeline-content" class="space-y-8 md:space-y-12">
                <!-- Timeline content will be populated here -->
            </div>
        </div>
    </div>
</section>

<!-- Cultural Insights Modal -->
<div id="cultural-insights-modal" class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="glass-card-strong p-6 md:p-8 rounded-3xl max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl md:text-2xl font-display font-bold gradient-text" id="modal-title">
                    Why We Chose This Place
                </h3>
                <button id="close-modal" class="text-slate-400 hover:text-white text-2xl md:text-3xl transition-colors">√ó</button>
            </div>
            <div id="modal-content" class="space-y-6">
                <!-- Dynamic content will be inserted here -->
            </div>
        </div>
    </div>
</div>

<!-- Enhanced JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç Enhanced Cultural Journey Interface Loaded');
    let originalUserVibe = '';
    let detectedLanguage = 'en';
    let currentItineraryId = null;
    let currentShareUrl = null;

    function detectLanguageFromVibe(text) {
        if (!text) return 'en';
        
        const lowerText = text.toLowerCase();
        
        // Franc√©s
        if (lowerText.match(/\b(je|veux|vivre|une|aventure|culinaire|au|mexique|essayant|des|tacos|avec|de|la|bi√®re)\b/) ||
            lowerText.match(/[√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß]/)) {
            return 'fr';
        }
        
        // Espa√±ol  
        if (lowerText.match(/\b(una|qu√©|ciudad|tarde|deseo|con|cerveza|sopa|experiencia|aventura)\b/) ||
            lowerText.match(/[√±√°√©√≠√≥√∫√º]/)) {
            return 'es';
        }
        
        // Ingl√©s por defecto
        return 'en';
    }

    function getDetectedLanguage() {
        // Usar idioma del backend si est√° disponible
        if (realBackendData && realBackendData.detected_language) {
            return realBackendData.detected_language;
        }
        
        // Detectar desde el vibe original
        if (originalUserVibe) {
            return detectLanguageFromVibe(originalUserVibe);
        }
        
        return 'en';
    }

    function processOpeningHours(hours, language = 'en') {
        if (!hours) return null;
        
        const labels = {
            'es': {
                open_now: 'Abierto ahora',
                closed_now: 'Cerrado ahora', 
                closed_today: 'Cerrado hoy',
                closes_at: 'Cierra a las',
                opens_at: 'Abre a las',
                hours: 'horarios'
            },
            'en': {
                open_now: 'Open now',
                closed_now: 'Closed now',
                closed_today: 'Closed today', 
                closes_at: 'Closes at',
                opens_at: 'Opens at',
                hours: 'hours'
            },
            'fr': {
                open_now: 'Ouvert maintenant',
                closed_now: 'Ferm√© maintenant',
                closed_today: 'Ferm√© aujourd\'hui',
                closes_at: 'Ferme √†',
                opens_at: 'Ouvre √†', 
                hours: 'horaires'
            },
            'pt': {
                open_now: 'Aberto agora',
                closed_now: 'Fechado agora',
                closed_today: 'Fechado hoje',
                closes_at: 'Fecha √†s',
                opens_at: 'Abre √†s',
                hours: 'hor√°rios'
            },
            'it': {
                open_now: 'Aperto ora',
                closed_now: 'Chiuso ora',
                closed_today: 'Chiuso oggi',
                closes_at: 'Chiude alle',
                opens_at: 'Apre alle',
                hours: 'orari'
            },
            'de': {
                open_now: 'Jetzt ge√∂ffnet',
                closed_now: 'Jetzt geschlossen',
                closed_today: 'Heute geschlossen',
                closes_at: 'Schlie√üt um',
                opens_at: '√ñffnet um',
                hours: '√∂ffnungszeiten'
            }
        };
        
        const lang = labels[language] || labels['en'];
        
        console.log('üïê Processing hours:', hours, 'Language:', language);
        
        // Si es un objeto con open_now
        if (typeof hours === 'object' && hours.open_now !== undefined) {
            const isOpen = hours.open_now;
            const closingTime = extractClosingTime(hours);
            const openingTime = extractOpeningTime(hours);
            
            if (isOpen && closingTime) {
                return {
                    status: 'open',
                    label: `${lang.open_now} ‚Ä¢ ${lang.closes_at} ${closingTime}`,
                    className: 'text-green-400'
                };
            } else if (isOpen) {
                return {
                    status: 'open',
                    label: lang.open_now,
                    className: 'text-green-400'
                };
            } else if (openingTime) {
                return {
                    status: 'closed',
                    label: `${lang.closed_now} ‚Ä¢ ${lang.opens_at} ${openingTime}`,
                    className: 'text-red-400'
                };
            } else {
                return {
                    status: 'closed',
                    label: lang.closed_now,
                    className: 'text-red-400'
                };
            }
        }
        
        // Si es un array de texto (weekday_text)
        if (Array.isArray(hours) && hours.length > 0) {
            const today = new Date().getDay();
            const todayHours = hours[today === 0 ? 6 : today - 1]; // Ajustar para domingo
            
            if (todayHours && !todayHours.toLowerCase().includes('cerrado') && !todayHours.toLowerCase().includes('closed')) {
                return {
                    status: 'info',
                    label: todayHours,
                    className: 'text-yellow-400'
                };
            }
        }
        
        // Si tiene weekday_text, usar ese
        if (hours.weekday_text && Array.isArray(hours.weekday_text)) {
            const today = new Date().getDay();
            const todayHours = hours.weekday_text[today === 0 ? 6 : today - 1];
            
            if (todayHours && !todayHours.toLowerCase().includes('cerrado') && !todayHours.toLowerCase().includes('closed')) {
                return {
                    status: 'info',
                    label: todayHours,
                    className: 'text-yellow-400'
                };
            }
        }
        
        return null;
    }

    function extractClosingTime(hours) {
        if (!hours.periods) return null;
        
        const now = new Date();
        const currentDay = now.getDay();
        
        const todayPeriod = hours.periods.find(period => 
            period.open && period.open.day === currentDay
        );
        
        if (todayPeriod && todayPeriod.close) {
            const closeTime = todayPeriod.close.time;
            return formatTime(closeTime);
        }
        
        return null;
    }

    function extractOpeningTime(hours) {
        if (!hours.periods) return null;
        
        const now = new Date();
        const currentDay = now.getDay();
        
        const todayPeriod = hours.periods.find(period => 
            period.open && period.open.day === currentDay
        );
        
        if (todayPeriod && todayPeriod.open) {
            const openTime = todayPeriod.open.time;
            return formatTime(openTime);
        }
        
        return null;
    }

    function formatTime(timeString) {
        if (!timeString) return null;
        
        // Si es formato "0900", convertir a "09:00"
        if (timeString.length === 4 && !timeString.includes(':')) {
            const hours = timeString.substring(0, 2);
            const minutes = timeString.substring(2, 4);
            return `${hours}:${minutes}`;
        }
        
        // Si ya tiene formato "09:00", devolverlo como est√°
        if (timeString.includes(':')) {
            return timeString;
        }
        
        return timeString;
    }
    
    // Global variables
    let currentProcessId = null;
    let statusInterval = null;
    let realBackendData = null;

    // DOM elements
    const form = document.getElementById('vibe-form');
    const submitBtn = document.getElementById('submit-btn');
    const textArea = document.getElementById('user_vibe');
    const charCount = document.getElementById('char-count');
    const heroSection = document.getElementById('hero-section');
    const processingSection = document.getElementById('processing-section');
    const dnaSection = document.getElementById('dna-section');
    const narrativeSection = document.getElementById('narrative-section');
    const timelineSection = document.getElementById('timeline-section');

    // Character counter
    if (textArea && charCount) {
        textArea.addEventListener('input', function() {
            const count = this.value.length;
            charCount.textContent = count;
            
            if (count > 450) {
                charCount.className = 'text-red-400';
            } else if (count > 350) {
                charCount.className = 'text-yellow-400';
            } else {
                charCount.className = 'text-slate-500';
            }
        });
    }

    // Modal functionality
    const modal = document.getElementById('cultural-insights-modal');
    const closeModal = document.getElementById('close-modal');
    
    if (closeModal) {
        closeModal.addEventListener('click', () => {
            modal.classList.add('hidden');
        });
    }

    if (modal) {
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
            }
        });
    }

    // ‚úÖ Event listener para el bot√≥n Share Adventure
    const shareAdventureBtn = document.getElementById('share-adventure-btn');
    if (shareAdventureBtn) {
        shareAdventureBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üöÄ Share Adventure button clicked');
            openShareModal();
        });
    }

    // Event listener para cerrar modal al hacer clic fuera
    const shareModal = document.getElementById('share-modal');
    if (shareModal) {
        shareModal.addEventListener('click', function(e) {
            if (e.target === shareModal) {
                closeShareModal();
            }
        });
    }

    // Form submission
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(form);
            const userVibe = formData.get('user_vibe');
            originalUserVibe = userVibe;
            detectedLanguage = detectLanguageFromVibe(userVibe);
            console.log('üåê Detected language:', detectedLanguage);
            
            if (!userVibe || userVibe.trim().length < 10) {
                showToast('Please describe your vibe with at least 10 characters', 'error');
                return;
            }
            
            console.log('üé≠ Processing user vibe:', userVibe.substring(0, 100));
            
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <span>Analyzing Cultural DNA...</span>
            `;
            
            // Show processing section
            transitionToSection(processingSection);
            
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ Backend response:', data);
                
                if (data.success && data.process_id) {
                    currentProcessId = data.process_id;
                    startStatusPolling();
                } else {
                    showError(data.message || 'Failed to start processing');
                }
            })
            .catch(error => {
                console.error('‚ùå Network error:', error);
                showError('Network connection failed. Please check your connection and try again.');
            });
        });
    }

    function startStatusPolling() {
        if (!currentProcessId) return;
        
        console.log('üîÑ Starting status polling for process:', currentProcessId);
        
        statusInterval = setInterval(() => {
            const baseUrl = window.location.origin;
            const statusUrl = `${baseUrl}/app/status/${currentProcessId}`;
            
            fetch(statusUrl, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content || ''
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log(`üìä Progress: ${data.progress}% - ${data.status}`);
                updateProcessingStatus(data);
                
                if (data.status === 'complete' && data.itinerary) {
                    clearInterval(statusInterval);
                    statusInterval = null;
                    
                    console.log('üéâ Journey processing complete');
                    realBackendData = data.itinerary;
                    
                    showResults(data.itinerary);
                    
                } else if (data.status === 'failed' || data.status === 'error') {
                    clearInterval(statusInterval);
                    statusInterval = null;
                    showError(data.message || 'Processing failed');
                }
            })
            .catch(error => {
                console.error('‚ùå Status polling error:', error);
                clearInterval(statusInterval);
                statusInterval = null;
                showError('Status check failed');
            });
        }, 2000);
    }

    function updateProcessingStatus(data) {
        const progressBar = document.getElementById('progress-bar');
        const progressPercent = document.getElementById('progress-percent');
        const processingLogs = document.getElementById('processing-logs');
        
        const progress = data.progress || 0;
        
        if (progressBar) progressBar.style.width = `${progress}%`;
        if (progressPercent) progressPercent.textContent = `${progress}%`;
        
        if (processingLogs && data.message) {
            const logEntry = document.createElement('div');
            logEntry.className = 'text-slate-300 text-xs flex items-center gap-2 fade-in-up';
            logEntry.innerHTML = `<span>üîç</span> <span>${data.message}</span>`;
            processingLogs.appendChild(logEntry);
            processingLogs.scrollTop = processingLogs.scrollHeight;
        }
    }

    function showResults(itinerary) {
        console.log('üé® Displaying results with sharing:', itinerary);
        
        // Store the itinerary ID for sharing
        if (itinerary.id) {
            currentItineraryId = itinerary.id;
            console.log('üíæ Stored itinerary ID for sharing:', currentItineraryId);
        }
        
        // Store the full itinerary data
        realBackendData = itinerary;
        
        // Show Cultural DNA if available
        if (itinerary.cultural_dna) {
            showCulturalDNA(itinerary.cultural_dna);
            transitionToSection(dnaSection);
            
            setTimeout(() => {
                if (itinerary.narrative_html) {
                    showNarrative(itinerary.narrative_html);
                    transitionToSection(narrativeSection);
                    
                    setTimeout(() => {
                        showTimeline(itinerary);
                        showShareButton(); // ‚úÖ Show share button
                    }, 2000);
                } else {
                    showTimeline(itinerary);
                    showShareButton(); // ‚úÖ Show share button
                }
            }, 3000);
        } else {
            if (itinerary.narrative_html) {
                showNarrative(itinerary.narrative_html);
                transitionToSection(narrativeSection);
                
                setTimeout(() => {
                    showTimeline(itinerary);
                    showShareButton(); // ‚úÖ Show share button
                }, 2000);
            } else {
                showTimeline(itinerary);
                showShareButton(); // ‚úÖ Show share button
            }
        }
    }

    function showCulturalDNA(culturalDna) {
        console.log('üß¨ Showing Cultural DNA:', culturalDna);
        
        if (culturalDna.archetypes) {
            populateArchetypes(culturalDna.archetypes);
        }
        
        if (culturalDna.cross_pollination) {
            populateCrossPollination(culturalDna.cross_pollination);
        }
        
        if (culturalDna.evolution_path && culturalDna.evolution_path.timeline) {
            populateEvolutionPath(culturalDna.evolution_path.timeline);
        }
    }

    function populateArchetypes(archetypes) {
        const container = document.getElementById('cultural-archetypes');
        if (!container) return;
        
        const colors = ['orange', 'green', 'purple', 'blue', 'yellow'];
        let html = '';
        
        Object.entries(archetypes).forEach(([archetype, score], index) => {
            const color = colors[index % colors.length];
            const emoji = getArchetypeEmoji(archetype);
            
            html += `
                <div class="archetype-item mb-6">
                    <div class="flex justify-between items-center mb-3">
                        <div class="flex items-center gap-3">
                            <span class="text-2xl">${emoji}</span>
                            <span class="font-semibold text-white capitalize">${archetype}</span>
                        </div>
                        <span class="text-${color}-400 font-bold text-lg">${score}%</span>
                    </div>
                    <div class="relative">
                        <div class="w-full bg-white/10 rounded-full h-3">
                            <div class="vibe-match-bar h-3 rounded-full transition-all duration-2000" style="width: ${score}%;"></div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function populateCrossPollination(crossPollination) {
        const container = document.getElementById('cross-pollination');
        if (!container) return;
        
        if (!crossPollination || crossPollination.length === 0) {
            container.innerHTML = '<div class="text-center text-slate-400 py-8 text-sm">No cross-pollination detected</div>';
            return;
        }
        
        let html = '';
        crossPollination.forEach((connection, index) => {
            const domains = connection.domains || [];
            const strength = Math.round((connection.strength || 0) * 100);
            const colors = ['orange', 'green', 'purple', 'blue'];
            const color = colors[index % colors.length];
            
            html += `
                <div class="glass-card p-4 rounded-2xl border-l-4 border-${color}-400 mb-4 hover-lift">
                    <h4 class="font-bold text-${color}-400 mb-2 flex items-center gap-2">
                        <span>üå±</span>
                        ${domains.join(' √ó ')}
                    </h4>
                    <div class="flex items-center justify-between mb-2">
                        <p class="text-sm text-slate-300">Strength: ${strength}%</p>
                        <div class="w-20 h-2 bg-white/10 rounded-full">
                            <div class="h-2 bg-${color}-400 rounded-full" style="width: ${strength}%;"></div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function populateEvolutionPath(timeline) {
        const container = document.getElementById('evolution-path');
        if (!container) return;
        
        const phases = ['immediate', 'short_term', 'medium_term', 'long_term'];
        const icons = ['‚ö°', 'üöÄ', 'üå±', 'üèÜ'];
        const labels = ['Immediate', 'Short Term', 'Medium Term', 'Long Term'];
        const colors = ['yellow', 'orange', 'green', 'purple'];
        
        let html = '';
        phases.forEach((phase, index) => {
            const suggestions = timeline[phase] || [];
            const suggestion = suggestions[0] || { suggestion: 'Continue your cultural journey' };
            const color = colors[index];
            
            html += `
                <div class="text-center p-4 glass-card rounded-2xl hover-lift">
                    <div class="w-12 h-12 mx-auto mb-3 rounded-2xl flex items-center justify-center bg-${color}-400/20">
                        <span class="text-2xl">${icons[index]}</span>
                    </div>
                    <div class="text-sm font-semibold mb-2 text-${color}-400">${labels[index]}</div>
                    <div class="text-xs text-slate-300 leading-relaxed">${suggestion.suggestion.substring(0, 60)}...</div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    function showNarrative(narrativeHtml) {
        console.log('üìñ Showing narrative');
        const narrativeContent = document.getElementById('narrative-content');
        if (narrativeContent) {
            narrativeContent.innerHTML = narrativeHtml;
        }
    }

    function showTimeline(itinerary) {
        console.log('‚è∞ Showing timeline with', itinerary.experiences?.length || 0, 'experiences');
        
        const timelineTitle = document.getElementById('timeline-title');
        const timelineContent = document.getElementById('timeline-content');
        
        if (timelineTitle) {
            timelineTitle.innerHTML = `Your Adventure in <span class="gradient-text">${itinerary.city || 'Unknown City'}</span>`;
        }
        
        if (timelineContent && itinerary.experiences) {
            timelineContent.innerHTML = generateTimelineHTML(itinerary.experiences);
        }
        
        transitionToSection(timelineSection);
        
        // ‚úÖ Show share button after a short delay
        setTimeout(() => {
            showShareButton();
        }, 1000);
    }

    function generateTimelineHTML(experiences) {
        if (!experiences || experiences.length === 0) {
            return '<div class="text-center text-slate-400 py-20">No experiences found</div>';
        }

        const experiencesHTML = experiences.map((exp, index) => {
            return generateExperienceCard(exp, index);
        }).join('');
        
        return experiencesHTML;
    }

    function generateExperienceCard(exp, index) {
        console.log(`üéØ Generating enhanced card ${index + 1}:`, exp.location);
        console.log('üó∫Ô∏è Experience data:', {
            latitude: exp.latitude,
            longitude: exp.longitude,
            address: exp.address,
            website: exp.website,
            phone: exp.phone,
            hours: exp.hours || exp.opening_hours
        });
        
        const colors = ['terracotta', 'sage', 'gold'];
        const color = colors[index % 3];
        const icons = ['‚òï', 'üé®', 'üç∏', 'üìö', 'üé≠', 'üó∫Ô∏è'];
        const icon = icons[index % icons.length];
        
        // Enhanced data extraction with safe fallbacks
        const time = exp.time || `${9 + index * 3}:00 ${index < 2 ? 'AM' : 'PM'}`;
        const title = exp.title || 'Cultural Experience';
        const location = exp.location || 'Special Location';
        const description = exp.description || 'A unique cultural experience';
        const area = exp.area || 'Center';
        const duration = exp.duration || '1-2 hours';
        const vibeMatch = exp.vibe_match || 85;
        const rating = exp.rating || 4.2;
        const priceLevel = exp.price_level || null;
        const address = exp.address || null;
        const website = exp.website || null;
        const phone = exp.phone || null;
        const latitude = exp.latitude;
        const longitude = exp.longitude;
        const qlooKeywords = exp.qloo_keywords ? extractQlooKeywords(exp.qloo_keywords) : [];
        const dataSources = exp.data_sources || ['qloo', 'google_places'];
        const dataQuality = exp.data_quality || 'high';
        const image = exp.image || getDefaultImage(index);
        
        // ‚úÖ PROCESAR HORARIOS
        const hours = exp.hours || exp.opening_hours;
        const language = getDetectedLanguage();
        console.log('üåê Using language for hours:', language);
        
        const { googleMapsUrl, directionsUrl, searchUrl } = generateGoogleMapsUrls(
            latitude, 
            longitude, 
            location, 
            address
        );
        
        return `
            <div class="glass-card-strong p-6 md:p-8 rounded-3xl hover-lift mb-8">
                <!-- Mobile-First Header -->
                <div class="flex flex-col sm:flex-row items-start gap-4 mb-6">
                    <div class="w-16 h-16 rounded-2xl flex items-center justify-center flex-shrink-0" style="background: linear-gradient(135deg, var(--accent-${color}), var(--accent-gold));">
                        <span class="text-2xl">${icon}</span>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-xs text-slate-500 uppercase tracking-wider mb-1">${time}</p>
                        <h3 class="text-xl md:text-2xl font-bold text-white mb-1">${title}</h3>
                        <p class="text-sm md:text-base text-slate-300 mb-1">${location}</p>
                        ${address ? `<p class="text-xs text-slate-400 truncate">${address}</p>` : ''}
                    </div>
                    <div class="text-right flex-shrink-0">
                        <div class="text-xl md:text-2xl font-bold gradient-text">${vibeMatch}%</div>
                        <div class="text-xs text-slate-400">Match</div>
                    </div>
                </div>
                
                <!-- ‚úÖ ENHANCED INFO BAR CON HORARIOS -->
                ${generateInfoBarWithHours(rating, priceLevel, duration, area, hours, language)}
                
                <!-- Enhanced Image -->
                ${image ? `
                    <div class="relative mb-6">
                        <img src="${image}" alt="${title}" class="w-full h-48 object-cover rounded-2xl" 
                            onerror="this.src='https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=600&h=400&fit=crop'">
                        <div class="absolute top-4 right-4 bg-green-500/80 px-3 py-1 rounded-full text-xs font-bold text-white flex items-center gap-1">
                            <span>‚úÖ</span> Real Qloo Data
                        </div>
                        <div class="absolute bottom-4 left-4 bg-black/60 px-3 py-1 rounded-full text-xs text-white">
                            ${area} ‚Ä¢ ${duration}
                        </div>
                    </div>
                ` : ''}
                
                <!-- Description -->
                <p class="text-sm md:text-base text-slate-400 mb-6 leading-relaxed">
                    ${description}
                </p>
                
                <!-- Cultural Insights Button -->
                <button class="w-full mb-6 glass-card p-4 rounded-2xl text-left hover:bg-white/10 transition-all duration-300" 
                        onclick="showCulturalInsights(${index}, '${location.replace(/'/g, "\\'")}')">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="w-10 h-10 rounded-full flex items-center justify-center" style="background: linear-gradient(135deg, var(--accent-${color}), var(--accent-gold));">
                                <span class="text-lg">üß†</span>
                            </div>
                            <div>
                                <div class="font-semibold text-white text-sm md:text-base">Why we chose this place?</div>
                                <div class="text-xs text-slate-400">Cultural insights & DNA analysis</div>
                            </div>
                        </div>
                        <svg class="w-5 h-5 text-slate-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                    </div>
                </button>
                
                <!-- Qloo Keywords -->
                ${qlooKeywords.length > 0 ? `
                    <div class="mb-6">
                        <p class="text-xs text-slate-500 mb-3 flex items-center gap-2">
                            <span class="text-yellow-400">üß¨</span>
                            Cultural DNA Keywords:
                        </p>
                        <div class="flex flex-wrap gap-2">
                            ${qlooKeywords.slice(0, 6).map(keyword => `
                                <span class="px-3 py-1 rounded-full text-xs font-medium text-white border" style="background: linear-gradient(135deg, var(--accent-${color})/30, var(--accent-gold)/30); border-color: var(--accent-${color})/40;">
                                    ${keyword}
                                </span>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
                
                <!-- Data Quality Footer -->
                <div class="glass-card bg-black/40 p-4 rounded-2xl mb-6">
                    <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 text-xs">
                        <div class="flex items-center gap-2">
                            <span class="text-green-400 font-semibold">Data Sources:</span>
                            <div class="flex flex-wrap gap-1">
                                ${dataSources.map(source => `
                                    <span class="px-2 py-1 bg-green-500/20 rounded text-green-200">${source}</span>
                                `).join('')}
                            </div>
                        </div>
                        <div class="text-slate-400">Quality: ${dataQuality}</div>
                    </div>
                </div>
                
                <!-- Action Buttons Grid -->
                <div class="grid grid-cols-2 gap-3">
                    ${directionsUrl && directionsUrl !== '#' ? `
                        <a href="${directionsUrl}" target="_blank" rel="noopener"
                        class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3l6-3" />
                            </svg>
                            <span class="hidden sm:inline">Directions</span>
                            <span class="sm:hidden">Go</span>
                        </a>
                    ` : ''}
                    
                    ${googleMapsUrl && googleMapsUrl !== '#' ? `
                        <a href="${googleMapsUrl}" target="_blank" rel="noopener"
                        class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                            </svg>
                            <span class="hidden sm:inline">View Map</span>
                            <span class="sm:hidden">Map</span>
                        </a>
                    ` : ''}
                    
                    ${website ? `
                        <a href="${website}" target="_blank" rel="noopener noreferrer"
                        class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9" />
                            </svg>
                            <span class="hidden sm:inline">Website</span>
                            <span class="sm:hidden">Web</span>
                        </a>
                    ` : ''}
                    
                    ${phone ? `
                        <a href="tel:${phone}" 
                        class="glass-card px-4 py-3 rounded-xl font-semibold text-sm hover:bg-white/20 transition-all duration-300 flex items-center justify-center gap-2">
                            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                            </svg>
                            <span class="hidden sm:inline">Call</span>
                            <span class="sm:hidden">üìû</span>
                        </a>
                    ` : ''}
                </div>
            </div>
        `;
    }

    function generateInfoBarWithHours(rating, priceLevel, duration, area, hours, language) {
        const hoursInfo = processOpeningHours(hours, language);
        
        return `
            <div class="flex flex-wrap items-center justify-between gap-4 mb-6 p-4 glass-card rounded-2xl">
                <div class="flex items-center gap-4">
                    <!-- Rating -->
                    <div class="flex items-center gap-2">
                        ${generateStarRating(rating)}
                        <span class="text-sm font-semibold text-white">${rating}</span>
                    </div>
                    
                    <!-- Price Level -->
                    ${priceLevel ? `
                        <div class="flex items-center">
                            ${generatePriceIndicator(priceLevel)}
                        </div>
                    ` : ''}
                    
                    <!-- Hours Status -->
                    ${hoursInfo ? `
                        <div class="flex items-center gap-1">
                            <svg class="w-4 h-4 ${hoursInfo.className}" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span class="text-xs font-medium ${hoursInfo.className}">${hoursInfo.label}</span>
                        </div>
                    ` : ''}
                </div>
                
                <!-- Duration & Area -->
                <div class="flex items-center gap-4 text-xs text-slate-400">
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        ${duration}
                    </span>
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        </svg>
                        ${area}
                    </span>
                </div>
            </div>
        `;
    }

    // ‚úÖ FUNCI√ìN CORREGIDA PARA GENERAR URLs DE GOOGLE MAPS 2024
    function generateGoogleMapsUrls(latitude, longitude, placeName, address) {
        console.log('üó∫Ô∏è Generating Maps URLs:', { latitude, longitude, placeName, address });
        
        let googleMapsUrl = '#';
        let directionsUrl = '#';
        let searchUrl = '#';
        
        // Validar coordenadas
        const hasValidCoords = latitude && longitude && 
                              !isNaN(parseFloat(latitude)) && !isNaN(parseFloat(longitude)) &&
                              parseFloat(latitude) !== 0 && parseFloat(longitude) !== 0;
        
        if (hasValidCoords) {
            const lat = parseFloat(latitude);
            const lng = parseFloat(longitude);
            
            // URLs con coordenadas (formato oficial Google Maps 2024)
            googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;
            directionsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;
            
            console.log('‚úÖ Generated coordinate-based URLs:', { googleMapsUrl, directionsUrl });
            
        } else if (address && address.trim() !== '') {
            // URLs con direcci√≥n
            const encodedAddress = encodeURIComponent(address.trim());
            googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodedAddress}`;
            directionsUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`;
            
            console.log('‚úÖ Generated address-based URLs:', { googleMapsUrl, directionsUrl });
            
        } else if (placeName && placeName.trim() !== '') {
            // URLs solo con nombre del lugar
            const encodedPlace = encodeURIComponent(placeName.trim());
            googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodedPlace}`;
            directionsUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodedPlace}`;
            
            console.log('‚úÖ Generated place-name URLs:', { googleMapsUrl, directionsUrl });
        } else {
            console.log('‚ùå No valid location data for Maps URLs');
        }
        
        return {
            googleMapsUrl,
            directionsUrl,
            searchUrl
        };
    }

    // Helper functions
    function extractQlooKeywords(keywordsArray) {
        const keywords = [];
        if (keywordsArray && Array.isArray(keywordsArray)) {
            keywordsArray.forEach(keyword => {
                if (typeof keyword === 'object' && keyword.name) {
                    keywords.push(keyword.name);
                } else if (typeof keyword === 'string') {
                    keywords.push(keyword);
                }
            });
        }
        return [...new Set(keywords)]; // Remove duplicates
    }

    function generateStarRating(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
        
        let html = '<div class="flex items-center gap-1">';
        
        // Full stars
        for (let i = 0; i < fullStars; i++) {
            html += '<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
        }
        
        // Half star
        if (hasHalfStar) {
            html += '<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><defs><linearGradient id="half"><stop offset="50%" stop-color="#fbbf24"/><stop offset="50%" stop-color="#374151"/></linearGradient></defs><path fill="url(#half)" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
        }
        
        // Empty stars
        for (let i = 0; i < emptyStars; i++) {
            html += '<svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/></svg>';
        }
        
        html += '</div>';
        return html;
    }

    function generatePriceIndicator(priceLevel) {
        const maxLevel = 4;
        let html = '<div class="flex items-center">';
        
        for (let i = 1; i <= maxLevel; i++) {
            const className = i <= priceLevel ? 'text-green-400' : 'text-gray-600';
            html += `<span class="${className} text-sm font-bold">$</span>`;
        }
        
        html += '</div>';
        return html;
    }

    function getArchetypeEmoji(archetype) {
        const emojiMap = {
            'artist': 'üé®',
            'explorer': 'üó∫Ô∏è',
            'philosopher': 'ü§î',
            'curator': 'üìö',
            'creator': '‚ú®',
            'seeker': 'üîç',
            'scholar': 'üìñ',
            'enthusiast': 'üéâ',
            'gourmand': 'üç∑',
            'socialite': 'üé≠',
            'historian': 'üèõÔ∏è'
        };
        return emojiMap[archetype.toLowerCase()] || 'üé≠';
    }

    function getDefaultImage(index) {
        const images = [
            "https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=800&auto=format&fit=crop&ixlib=rb-4.0.3",
            "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=800&auto=format&fit=crop&ixlib=rb-4.0.3", 
            "https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=800&auto=format&fit=crop&ixlib=rb-4.0.3"
        ];
        return images[index] || images[0];
    }

    // Section transitions
    function transitionToSection(targetSection) {
        const sections = [heroSection, processingSection, dnaSection, narrativeSection, timelineSection];
        
        sections.forEach(section => {
            if (section && section !== targetSection) {
                section.classList.remove('section-visible');
                section.classList.add('section-hidden');
            }
        });

        if (targetSection) {
            targetSection.classList.remove('section-hidden');
            targetSection.classList.add('section-visible');
            
            setTimeout(() => {
                targetSection.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'start' 
                });
            }, 100);
        }
    }

    // Error handling
    function showError(message) {
        console.error('‚ùå Error:', message);
        
        const errorHTML = `
            <div class="text-center max-w-xl mx-auto">
                <div class="w-16 h-16 mx-auto mb-6 rounded-full flex items-center justify-center bg-red-500/20 border border-red-400">
                    <svg class="w-8 h-8 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                </div>
                <h3 class="text-xl md:text-2xl font-bold text-white mb-4">Something went wrong</h3>
                <p class="text-red-300 mb-8 text-sm md:text-base">${message}</p>
                <button onclick="location.reload()" class="font-bold py-3 px-6 rounded-xl text-white hover:shadow-lg transition-all duration-300" style="background: linear-gradient(135deg, var(--accent-terracotta), var(--accent-sage));">
                    Try Again
                </button>
            </div>
        `;
        
        if (processingSection) {
            const container = processingSection.querySelector('.relative.z-10') || processingSection;
            container.innerHTML = errorHTML;
        }
        
        // Reset form
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = `
                <span class="text-xl md:text-2xl">üîç</span>
                <span class="relative z-10">Analyze with Real Data</span>
                <svg class="w-5 h-5 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                </svg>
            `;
        }
    }

    // Toast notifications
    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `fixed top-24 right-4 z-50 glass-card p-4 rounded-xl max-w-sm transform translate-x-full transition-transform duration-300 ${
            type === 'error' ? 'border-red-400' : 'border-green-400'
        }`;
        
        toast.innerHTML = `
            <div class="flex items-center gap-3">
                <div class="w-5 h-5 rounded-full ${type === 'error' ? 'bg-red-400' : 'bg-green-400'}"></div>
                <p class="text-white text-sm">${message}</p>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        // Show toast
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);
        
        // Hide toast
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }

    // ‚úÖ FUNCIONES GLOBALES PARA COMPARTIR
    window.openShareModal = function() {
        console.log('üì§ Opening share modal');
        
        if (realBackendData) {
            const adventureTitle = document.getElementById('adventure-title');
            const adventureCity = document.getElementById('adventure-city');
            const adventureDescription = document.getElementById('adventure-description');
            const userInitial = document.getElementById('user-initial');
            
            if (adventureTitle) adventureTitle.textContent = `Cultural Adventure in ${realBackendData.city || 'Unknown City'}`;
            if (adventureCity) adventureCity.textContent = realBackendData.city || 'Unknown City';
            if (adventureDescription) adventureDescription.textContent = originalUserVibe || 'A unique cultural journey';
            if (userInitial) {
                const initial = (realBackendData.city || 'A').charAt(0).toUpperCase();
                userInitial.textContent = initial;
            }
        }
        
        const modal = document.getElementById('share-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    };

    window.closeShareModal = function() {
        console.log('‚ùå Closing share modal');
        const modal = document.getElementById('share-modal');
        if (modal) {
            modal.classList.add('hidden');
        }
    };

    window.makePublicAndShare = function() {
        console.log('üåê Making adventure public, currentItineraryId:', currentItineraryId);
        
        const btn = document.getElementById('make-public-btn');
        if (!btn) return;
        
        btn.innerHTML = '<span class="loading-dots"><span></span><span></span><span></span></span> Making Public...';
        btn.disabled = true;
        
        if (currentItineraryId) {
            fetch(`/itineraries/${currentItineraryId}/make_public`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content || '',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ Make public response:', data);
                
                if (data.success) {
                    currentShareUrl = data.share_url;
                    document.getElementById('share-url').value = currentShareUrl;
                    document.getElementById('share-options').classList.remove('hidden');
                    
                    btn.innerHTML = '‚úÖ Adventure is now public!';
                    btn.disabled = false;
                    
                    showToast('Your adventure is now public and ready to share!', 'success');
                } else {
                    btn.innerHTML = '‚ùå Failed to make public';
                    btn.disabled = false;
                    showToast(data.message || 'Failed to make adventure public', 'error');
                }
            })
            .catch(error => {
                console.error('‚ùå Error making public:', error);
                btn.innerHTML = '‚ùå Error occurred';
                btn.disabled = false;
                showToast('Network error. Please try again.', 'error');
            });
        } else {
            console.log('‚ö†Ô∏è No itinerary ID available');
            btn.innerHTML = '‚ùå No itinerary found';
            btn.disabled = false;
            showToast('No itinerary found. Please create a new journey.', 'error');
        }
    };

    window.copyShareLink = function() {
        const shareUrl = document.getElementById('share-url').value;
        
        if (navigator.clipboard && navigator.clipboard.writeText) {
            navigator.clipboard.writeText(shareUrl).then(() => {
                showToast('Link copied to clipboard!', 'success');
            }).catch(err => {
                console.error('Failed to copy: ', err);
                fallbackCopyText(shareUrl);
            });
        } else {
            fallbackCopyText(shareUrl);
        }
    };

    function fallbackCopyText(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-9999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            showToast('Link copied to clipboard!', 'success');
        } catch (err) {
            console.error('Fallback copy failed:', err);
            showToast('Could not copy link. Please copy manually.', 'error');
        }
        
        document.body.removeChild(textArea);
    }

    window.shareToTwitter = function() {
        if (currentShareUrl) {
            const text = encodeURIComponent(`Check out my cultural adventure! ${realBackendData?.city ? `in ${realBackendData.city}` : ''} üé≠‚ú®`);
            const url = encodeURIComponent(currentShareUrl);
            const twitterUrl = `https://twitter.com/intent/tweet?text=${text}&url=${url}`;
            
            window.open(twitterUrl, '_blank', 'width=550,height=420');
            incrementShareCount();
        } else {
            showToast('Please make your adventure public first', 'error');
        }
    };

    window.shareToFacebook = function() {
        if (currentShareUrl) {
            const url = encodeURIComponent(currentShareUrl);
            const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
            
            window.open(facebookUrl, '_blank', 'width=626,height=436');
            incrementShareCount();
        } else {
            showToast('Please make your adventure public first', 'error');
        }
    };

    function incrementShareCount() {
        if (currentItineraryId) {
            fetch(`/itineraries/${currentItineraryId}/increment_share`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content || ''
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('üìä Share count incremented');
            })
            .catch(error => {
                console.error('Error incrementing share count:', error);
            });
        }
    }

    function showShareButton() {
        const shareBtn = document.getElementById('share-adventure-btn');
        if (shareBtn) {
            console.log('üîÑ Showing share button');
            shareBtn.style.display = 'inline-flex';
            
            shareBtn.style.opacity = '0';
            shareBtn.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                shareBtn.style.transition = 'all 0.5s ease-out';
                shareBtn.style.opacity = '1';
                shareBtn.style.transform = 'translateY(0)';
            }, 100);
        }
    }

    // Cultural Insights Modal Function
    window.showCulturalInsights = function(index, placeName) {
        console.log(`üß† Showing cultural insights for ${placeName}`);
        
        if (!realBackendData || !realBackendData.experiences || !realBackendData.experiences[index]) {
            console.error('No experience data available for insights');
            return;
        }
        
        const experience = realBackendData.experiences[index];
        const modalTitle = document.getElementById('modal-title');
        const modalContent = document.getElementById('modal-content');
        
        if (modalTitle) {
            modalTitle.innerHTML = `Why We Chose <span class="gradient-text">${placeName}</span>`;
        }
        
        let content = '';
        
        // Cultural Resonance
        if (experience.cultural_explanation) {
            content += `
                <div class="glass-card p-6 rounded-2xl">
                    <h4 class="font-bold text-orange-400 mb-4 flex items-center gap-3 text-lg">
                        ‚ö° Cultural Resonance
                    </h4>
                    <p class="text-slate-300 leading-relaxed">${experience.cultural_explanation}</p>
                </div>
            `;
        }
        
        // Why Chosen
        if (experience.why_chosen) {
            content += `
                <div class="glass-card p-6 rounded-2xl">
                    <h4 class="font-bold text-blue-400 mb-4 flex items-center gap-3 text-lg">
                        üéØ Selection Rationale
                    </h4>
                    <p class="text-slate-300 leading-relaxed">${experience.why_chosen}</p>
                </div>
            `;
        }
        
        // Cultural DNA from experience
        if (realBackendData.cultural_dna) {
            if (realBackendData.cultural_dna.archetypes) {
                content += `
                    <div class="glass-card p-6 rounded-2xl">
                        <h4 class="font-bold text-purple-400 mb-4 flex items-center gap-3 text-lg">
                            üß¨ Matching Archetypes
                        </h4>
                        <div class="space-y-2">
                            ${Object.entries(realBackendData.cultural_dna.archetypes).map(([archetype, score]) => `
                                <div class="flex justify-between items-center">
                                    <span class="text-slate-300">${archetype}</span>
                                    <span class="text-purple-400 font-bold">${score}%</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
        }
        
        // Vibe Match Score
        content += `
            <div class="glass-card p-6 rounded-2xl">
                <h4 class="font-bold text-pink-400 mb-4 flex items-center gap-3 text-lg">
                    üí´ Vibe Match Analysis
                </h4>
                <div class="flex items-center gap-6">
                    <div class="text-4xl font-bold gradient-text">${experience.vibe_match || 85}%</div>
                    <div class="flex-1">
                        <div class="w-full bg-white/10 rounded-full h-3 mb-2">
                            <div class="vibe-match-bar h-3 rounded-full" style="width: ${experience.vibe_match || 85}%;"></div>
                        </div>
                        <p class="text-slate-400 text-sm">Based on your cultural preferences and Qloo intelligence</p>
                    </div>
                </div>
            </div>
        `;
        
        if (!content) {
            content = `
                <div class="text-center text-slate-400 py-12">
                    <div class="text-6xl mb-6">ü§î</div>
                    <p class="text-lg mb-3">Cultural insights are being processed...</p>
                    <p class="text-sm">This place was selected based on your unique cultural DNA profile.</p>
                </div>
            `;
        }
        
        if (modalContent) {
            modalContent.innerHTML = content;
        }
        
        modal.classList.remove('hidden');
    };

    // Global restart function
    window.startNewJourney = function() {
        location.reload();
    };

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
            modal.classList.add('hidden');
        }
    });
});

// Loading dots animation styles
const loadingDotsCSS = `
<style>
.loading-dots {
    display: inline-flex;
    gap: 4px;
}

.loading-dots span {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: var(--accent-terracotta);
    animation: bounce 1.4s ease-in-out infinite both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }

@keyframes bounce {
    0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }
    40% { transform: scale(1.2); opacity: 1; }
}
</style>
`;

// Add loading dots CSS to head
document.head.insertAdjacentHTML('beforeend', loadingDotsCSS);
</script>